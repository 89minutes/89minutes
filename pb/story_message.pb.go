// Code generated by protoc-gen-go. DO NOT EDIT.
// source: story_message.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Story struct {
	// UUID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Title of the story
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Text contents
	TextContent string `protobuf:"bytes,3,opt,name=textContent,proto3" json:"textContent,omitempty"`
	// Story can have multiple images and videos
	FileContent [][]byte `protobuf:"bytes,4,rep,name=fileContent,proto3" json:"fileContent,omitempty"`
	// Story can have formatted texts, like code
	FormattedText []string `protobuf:"bytes,5,rep,name=formattedText,proto3" json:"formattedText,omitempty"`
	// Name of the author
	WrittenBy string `protobuf:"bytes,6,opt,name=WrittenBy,proto3" json:"WrittenBy,omitempty"`
	// Is the story draft and not published
	IsDraft bool `protobuf:"varint,7,opt,name=isDraft,proto3" json:"isDraft,omitempty"`
	// Create time
	CreateTime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// Update time
	UpdateTime           *timestamp.Timestamp `protobuf:"bytes,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Story) Reset()         { *m = Story{} }
func (m *Story) String() string { return proto.CompactTextString(m) }
func (*Story) ProtoMessage()    {}
func (*Story) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc724024df710507, []int{0}
}

func (m *Story) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Story.Unmarshal(m, b)
}
func (m *Story) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Story.Marshal(b, m, deterministic)
}
func (m *Story) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Story.Merge(m, src)
}
func (m *Story) XXX_Size() int {
	return xxx_messageInfo_Story.Size(m)
}
func (m *Story) XXX_DiscardUnknown() {
	xxx_messageInfo_Story.DiscardUnknown(m)
}

var xxx_messageInfo_Story proto.InternalMessageInfo

func (m *Story) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Story) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Story) GetTextContent() string {
	if m != nil {
		return m.TextContent
	}
	return ""
}

func (m *Story) GetFileContent() [][]byte {
	if m != nil {
		return m.FileContent
	}
	return nil
}

func (m *Story) GetFormattedText() []string {
	if m != nil {
		return m.FormattedText
	}
	return nil
}

func (m *Story) GetWrittenBy() string {
	if m != nil {
		return m.WrittenBy
	}
	return ""
}

func (m *Story) GetIsDraft() bool {
	if m != nil {
		return m.IsDraft
	}
	return false
}

func (m *Story) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Story) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func init() {
	proto.RegisterType((*Story)(nil), "Story")
}

func init() { proto.RegisterFile("story_message.proto", fileDescriptor_dc724024df710507) }

var fileDescriptor_dc724024df710507 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x49, 0xda, 0xa4, 0xcd, 0x54, 0x3d, 0xac, 0x1e, 0x96, 0x22, 0xb8, 0x88, 0x87, 0x9c,
	0x52, 0xd0, 0x9b, 0xde, 0xaa, 0x4f, 0x10, 0x03, 0x82, 0x17, 0x49, 0xcc, 0x24, 0x2c, 0x64, 0xb3,
	0x61, 0x77, 0x0a, 0xed, 0x13, 0xfa, 0x5a, 0x92, 0x0d, 0x4b, 0xe3, 0xc9, 0xe3, 0xff, 0xcd, 0xf7,
	0x33, 0xf0, 0xc3, 0xb5, 0x25, 0x6d, 0x4e, 0x5f, 0x0a, 0xad, 0x2d, 0x5b, 0xcc, 0x06, 0xa3, 0x49,
	0x6f, 0xef, 0x5a, 0xad, 0xdb, 0x0e, 0x77, 0x2e, 0x55, 0x87, 0x66, 0x47, 0x52, 0xa1, 0xa5, 0x52,
	0x0d, 0x93, 0x70, 0xff, 0x13, 0x42, 0xf4, 0x3e, 0x16, 0xd9, 0x15, 0x84, 0xb2, 0xe6, 0x81, 0x08,
	0xd2, 0x24, 0x0f, 0x65, 0xcd, 0x6e, 0x20, 0x22, 0x49, 0x1d, 0xf2, 0xd0, 0xa1, 0x29, 0x30, 0x01,
	0x1b, 0xc2, 0x23, 0xbd, 0xea, 0x9e, 0xb0, 0x27, 0xbe, 0x70, 0xb7, 0x39, 0x1a, 0x8d, 0x46, 0x76,
	0xe8, 0x8d, 0xa5, 0x58, 0xa4, 0x17, 0xf9, 0x1c, 0xb1, 0x07, 0xb8, 0x6c, 0xb4, 0x51, 0x25, 0x11,
	0xd6, 0x05, 0x1e, 0x89, 0x47, 0x62, 0x91, 0x26, 0xf9, 0x5f, 0xc8, 0x6e, 0x21, 0xf9, 0x30, 0x92,
	0x08, 0xfb, 0xfd, 0x89, 0xc7, 0xee, 0xcf, 0x19, 0x30, 0x0e, 0x2b, 0x69, 0xdf, 0x4c, 0xd9, 0x10,
	0x5f, 0x89, 0x20, 0x5d, 0xe7, 0x3e, 0xb2, 0x67, 0x80, 0x6f, 0x83, 0x25, 0x61, 0x21, 0x15, 0xf2,
	0xb5, 0x08, 0xd2, 0xcd, 0xe3, 0x36, 0x9b, 0x76, 0xc8, 0xfc, 0x0e, 0x59, 0xe1, 0x77, 0xc8, 0x67,
	0xf6, 0xd8, 0x3d, 0x0c, 0xb5, 0xef, 0x26, 0xff, 0x77, 0xcf, 0xf6, 0x3e, 0xfe, 0x5c, 0x66, 0x2f,
	0x43, 0x55, 0xc5, 0xce, 0x7b, 0xfa, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x01, 0x18, 0xcf, 0xbf, 0x90,
	0x01, 0x00, 0x00,
}
