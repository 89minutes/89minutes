// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: story_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoryServiceClient is the client API for StoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoryServiceClient interface {
	Create(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error)
	GetLatest(ctx context.Context, in *GetLatestStoryRequest, opts ...grpc.CallOption) (StoryService_GetLatestClient, error)
	Update(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error)
}

type storyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoryServiceClient(cc grpc.ClientConnInterface) StoryServiceClient {
	return &storyServiceClient{cc}
}

func (c *storyServiceClient) Create(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error) {
	out := new(CreateStoryResponse)
	err := c.cc.Invoke(ctx, "/StoryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) GetLatest(ctx context.Context, in *GetLatestStoryRequest, opts ...grpc.CallOption) (StoryService_GetLatestClient, error) {
	stream, err := c.cc.NewStream(ctx, &StoryService_ServiceDesc.Streams[0], "/StoryService/GetLatest", opts...)
	if err != nil {
		return nil, err
	}
	x := &storyServiceGetLatestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StoryService_GetLatestClient interface {
	Recv() (*GetLatestStoryResponse, error)
	grpc.ClientStream
}

type storyServiceGetLatestClient struct {
	grpc.ClientStream
}

func (x *storyServiceGetLatestClient) Recv() (*GetLatestStoryResponse, error) {
	m := new(GetLatestStoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storyServiceClient) Update(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error) {
	out := new(UpdateStoryResponse)
	err := c.cc.Invoke(ctx, "/StoryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoryServiceServer is the server API for StoryService service.
// All implementations must embed UnimplementedStoryServiceServer
// for forward compatibility
type StoryServiceServer interface {
	Create(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error)
	GetLatest(*GetLatestStoryRequest, StoryService_GetLatestServer) error
	Update(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error)
	mustEmbedUnimplementedStoryServiceServer()
}

// UnimplementedStoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStoryServiceServer struct {
}

func (UnimplementedStoryServiceServer) Create(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStoryServiceServer) GetLatest(*GetLatestStoryRequest, StoryService_GetLatestServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLatest not implemented")
}
func (UnimplementedStoryServiceServer) Update(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStoryServiceServer) mustEmbedUnimplementedStoryServiceServer() {}

// UnsafeStoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoryServiceServer will
// result in compilation errors.
type UnsafeStoryServiceServer interface {
	mustEmbedUnimplementedStoryServiceServer()
}

func RegisterStoryServiceServer(s grpc.ServiceRegistrar, srv StoryServiceServer) {
	s.RegisterService(&StoryService_ServiceDesc, srv)
}

func _StoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).Create(ctx, req.(*CreateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_GetLatest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLatestStoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoryServiceServer).GetLatest(m, &storyServiceGetLatestServer{stream})
}

type StoryService_GetLatestServer interface {
	Send(*GetLatestStoryResponse) error
	grpc.ServerStream
}

type storyServiceGetLatestServer struct {
	grpc.ServerStream
}

func (x *storyServiceGetLatestServer) Send(m *GetLatestStoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).Update(ctx, req.(*UpdateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoryService_ServiceDesc is the grpc.ServiceDesc for StoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StoryService",
	HandlerType: (*StoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StoryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StoryService_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLatest",
			Handler:       _StoryService_GetLatest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "story_service.proto",
}
